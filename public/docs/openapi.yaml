openapi: 3.0.3
info:
  title: Laravel
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://localhost:8000'
paths:
  /api/actors:
    get:
      summary: ''
      operationId: getApiActors
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Actor management'
    post:
      summary: ''
      operationId: postApiActors
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Actor management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must be at least 3 characters.'
                  example: gbnavvxdijtvhkqmtnuwtmjogasxkvyn
                last_name:
                  type: string
                  description: 'Must be at least 3 characters.'
                  example: rnqdkgmjyooubzrlgku
              required:
                - name
                - last_name
  '/api/actors/{actor_id}':
    get:
      summary: ''
      operationId: getApiActorsActor_id
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Actor management'
    put:
      summary: ''
      operationId: putApiActorsActor_id
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Actor management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must be at least 3 characters.'
                  example: szjolzehsgimnkffazhxldwqrkiamasyhdatdctvcvosaobjawmtowcpeoacoqvbtogvibagebbawrywpwcoas
                last_name:
                  type: string
                  description: 'Must be at least 3 characters.'
                  example: hlmqmavjkhxfpbffveotmvswbrqcpexqtdkjyfvajoaicrr
              required:
                - name
                - last_name
    delete:
      summary: ''
      operationId: deleteApiActorsActor_id
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Actor management'
    parameters:
      -
        in: path
        name: actor_id
        description: 'The ID of the actor.'
        example: 1
        required: true
        schema:
          type: integer
  /api/directors:
    get:
      summary: ''
      operationId: getApiDirectors
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Director management'
    post:
      summary: ''
      operationId: postApiDirectors
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Director management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must be at least 3 characters.'
                  example: uhmddwgdlhcmsszhjqjksomhwrcvprnrnepwdbsjjtwdduyyhukyceqzi
                last_name:
                  type: string
                  description: 'Must be at least 3 characters.'
                  example: gunbnzyvxtiimnkfbezsnsymraagqsyfbvrorjhtjjtssjfbgmszzyrevjhakpkmr
              required:
                - name
                - last_name
  '/api/directors/{director_id}':
    get:
      summary: ''
      operationId: getApiDirectorsDirector_id
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Director management'
    put:
      summary: ''
      operationId: putApiDirectorsDirector_id
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Director management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must be at least 3 characters.'
                  example: leipkbalkqywmnscpxwtpptnjzwvxibkjfdrheqgtpbyjktrajlunidn
                last_name:
                  type: string
                  description: 'Must be at least 3 characters.'
                  example: rwzwkxzrwehjrbkopbfaarbuujojqlqlkxezicrnhlxdmhhtsyqsrjpqbrahlxrwz
              required:
                - name
                - last_name
    delete:
      summary: ''
      operationId: deleteApiDirectorsDirector_id
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Director management'
    parameters:
      -
        in: path
        name: director_id
        description: 'The ID of the director.'
        example: 1
        required: true
        schema:
          type: integer
  /api/movies:
    get:
      summary: ''
      operationId: getApiMovies
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Movie management'
    post:
      summary: ''
      operationId: postApiMovies
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Movie management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: 'Must be at least 3 characters.'
                  example: pwmlowdwnatyjmvqyohnzsbpaabwdkwgjamxybxagauabcfbhmrkaozvvxxpokhnnwa
                description:
                  type: string
                  description: ''
                  example: fuga
                genre:
                  type: string
                  description: 'Must be one of <code>TERROR</code>, <code>ACCION</code>, <code>COMEDIA</code>, or <code>ROMANCE</code> Must be at least 3 characters.'
                  example: eeimygjhszzqsgiqvabyztevuosspvffclalbrmtexgkrrijmaxachqtdopfcymemczgyohevgwgwag
                publish_at:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2023-08-05T02:09:06'
                director_id:
                  type: string
                  description: ''
                  example: dolorem
              required:
                - title
                - description
                - genre
                - publish_at
                - director_id
  '/api/movies/{movie_id}':
    get:
      summary: ''
      operationId: getApiMoviesMovie_id
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Movie management'
    put:
      summary: ''
      operationId: putApiMoviesMovie_id
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Movie management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: 'Must be at least 3 characters.'
                  example: eseqgrolhsdpjawkdwwsdbacjvs
                description:
                  type: string
                  description: ''
                  example: autem
                genre:
                  type: string
                  description: 'Must be one of <code>TERROR</code>, <code>ACCION</code>, <code>COMEDIA</code>, or <code>ROMANCE</code> Must be at least 3 characters.'
                  example: nvfemhzeafaqbbbocwpgcdwadlofeqfukkfwrilpsov
                publish_at:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2023-08-05T02:09:06'
                director_id:
                  type: string
                  description: ''
                  example: et
              required:
                - title
                - description
                - genre
                - publish_at
                - director_id
    parameters:
      -
        in: path
        name: movie_id
        description: 'The ID of the movie.'
        example: 1
        required: true
        schema:
          type: integer
  '/api/movie/{movie_id}':
    delete:
      summary: ''
      operationId: deleteApiMovieMovie_id
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Movie management'
    parameters:
      -
        in: path
        name: movie_id
        description: 'The ID of the movie.'
        example: 1
        required: true
        schema:
          type: integer
  '/api/movies/{movie_id}/actors':
    get:
      summary: ''
      operationId: getApiMoviesMovie_idActors
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Movie management'
    post:
      summary: ''
      operationId: postApiMoviesMovie_idActors
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Movie management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                actors:
                  type: array
                  description: ''
                  example:
                    - quaerat
                  items:
                    type: string
              required:
                - actors
    delete:
      summary: ''
      operationId: deleteApiMoviesMovie_idActors
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Movie management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                actors:
                  type: array
                  description: ''
                  example:
                    - rem
                  items:
                    type: string
              required:
                - actors
    parameters:
      -
        in: path
        name: movie_id
        description: 'The ID of the movie.'
        example: 1
        required: true
        schema:
          type: integer
  '/api/movies/{movie_id}/rents':
    get:
      summary: ''
      operationId: getApiMoviesMovie_idRents
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Movie management'
    post:
      summary: ''
      operationId: postApiMoviesMovie_idRents
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Movie management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rents:
                  type: array
                  description: ''
                  example:
                    - ratione
                  items:
                    type: string
              required:
                - rents
    delete:
      summary: ''
      operationId: deleteApiMoviesMovie_idRents
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Movie management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rents:
                  type: array
                  description: ''
                  example:
                    - dolor
                  items:
                    type: string
              required:
                - rents
    parameters:
      -
        in: path
        name: movie_id
        description: 'The ID of the movie.'
        example: 1
        required: true
        schema:
          type: integer
  /api/rents:
    get:
      summary: ''
      operationId: getApiRents
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Rent management'
    post:
      summary: ''
      operationId: postApiRents
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Rent management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                deadline_at:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2023-08-05T02:09:06'
                return_date_at:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2023-08-05T02:09:06'
                actual_date_at:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2023-08-05T02:09:06'
                user_id:
                  type: string
                  description: ''
                  example: blanditiis
              required:
                - deadline_at
                - return_date_at
                - actual_date_at
                - user_id
  '/api/rents/{rent_id}':
    get:
      summary: ''
      operationId: getApiRentsRent_id
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Rent management'
    put:
      summary: ''
      operationId: putApiRentsRent_id
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Rent management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                deadline_at:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2023-08-05T02:09:06'
                return_date_at:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2023-08-05T02:09:06'
                actual_date_at:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2023-08-05T02:09:06'
                user_id:
                  type: string
                  description: ''
                  example: impedit
              required:
                - deadline_at
                - return_date_at
                - actual_date_at
                - user_id
    delete:
      summary: ''
      operationId: deleteApiRentsRent_id
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Rent management'
    parameters:
      -
        in: path
        name: rent_id
        description: 'The ID of the rent.'
        example: 1
        required: true
        schema:
          type: integer
  /api/auth:
    post:
      summary: ''
      operationId: postApiAuth
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Security management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: russell88@example.net
                password:
                  type: string
                  description: ''
                  example: delectus
              required:
                - email
                - password
      security: []
  /api/user:
    post:
      summary: ''
      operationId: postApiUser
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'User management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: ''
                  example: suscipit
                age:
                  type: string
                  description: ''
                  example: vitae
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: wendell41@example.net
                password:
                  type: string
                  description: ''
                  example: non
              required:
                - name
                - age
                - email
                - password
  '/api/auth/{user_id}':
    put:
      summary: ''
      operationId: putApiAuthUser_id
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'User management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: ''
                  example: excepturi
                age:
                  type: string
                  description: ''
                  example: dolore
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: macejkovic.lois@example.com
                password:
                  type: string
                  description: ''
                  example: eum
              required:
                - name
                - age
                - email
                - password
    delete:
      summary: ''
      operationId: deleteApiAuthUser_id
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'User management'
    parameters:
      -
        in: path
        name: user_id
        description: 'The ID of the user.'
        example: 1
        required: true
        schema:
          type: integer
tags:
  -
    name: 'Actor management'
    description: ''
  -
    name: 'Director management'
    description: ''
  -
    name: 'Movie management'
    description: ''
  -
    name: 'Rent management'
    description: ''
  -
    name: 'Security management'
    description: ''
  -
    name: 'User management'
    description: ''
