openapi: 3.0.3
info:
  title: Laravel
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://localhost:8000'
paths:
  /api/actors:
    get:
      summary: ''
      operationId: getApiActors
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Actor management'
    post:
      summary: ''
      operationId: postApiActors
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'Actor management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must be at least 3 characters.'
                  example: sbqqfqpvnyq
                last_name:
                  type: string
                  description: 'Must be at least 3 characters.'
                  example: ostulxpfybjajoxmfupuwdbxxvexzelzacalpeczxto
              required:
                - name
                - last_name
  '/api/actors/{actor_id}':
    get:
      summary: ''
      operationId: getApiActorsActor_id
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Actor management'
    put:
      summary: ''
      operationId: putApiActorsActor_id
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'Actor management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must be at least 3 characters.'
                  example: txhkrfphbuonvbojlulowbfmyhebiwkifugwsqvdfrxuhmbybvadrsviikgdcejnlpkejgghfzshetco
                last_name:
                  type: string
                  description: 'Must be at least 3 characters.'
                  example: ehdppscoxuuilbbfdtpaqtgeqeifxurdzmrpdbfbonunzfxhckzkewjrlafalxfelqbe
              required:
                - name
                - last_name
    delete:
      summary: ''
      operationId: deleteApiActorsActor_id
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'Actor management'
    parameters:
      -
        in: path
        name: actor_id
        description: 'The ID of the actor.'
        example: 1
        required: true
        schema:
          type: integer
  /api/directors:
    get:
      summary: ''
      operationId: getApiDirectors
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Director management'
    post:
      summary: ''
      operationId: postApiDirectors
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'Director management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must be at least 3 characters.'
                  example: drtfsbkyakpodonodtuzihpikvzudogihlscexdhcedzeiheta
                last_name:
                  type: string
                  description: 'Must be at least 3 characters.'
                  example: iisnfsytmfoewdciofenyvqekjbagdtlorupbbcfmsakczhhabzcvmoqvl
              required:
                - name
                - last_name
  '/api/directors/{director_id}':
    get:
      summary: ''
      operationId: getApiDirectorsDirector_id
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Director management'
    put:
      summary: ''
      operationId: putApiDirectorsDirector_id
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'Director management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must be at least 3 characters.'
                  example: sqywfzzgnmptigpitcsgypwyftfqjclybibhhmpkwuvyvyeyjgvgw
                last_name:
                  type: string
                  description: 'Must be at least 3 characters.'
                  example: stbchfbearbwzhounumwyqsjqbutqlpnpsnstbwbnmpmzrroot
              required:
                - name
                - last_name
    delete:
      summary: ''
      operationId: deleteApiDirectorsDirector_id
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'Director management'
    parameters:
      -
        in: path
        name: director_id
        description: 'The ID of the director.'
        example: 1
        required: true
        schema:
          type: integer
  /api/user:
    get:
      summary: ''
      operationId: getApiUser
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
  /api/users:
    get:
      summary: ''
      operationId: getApiUsers
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
  '/api/movies/{movie_id}/images':
    get:
      summary: ''
      operationId: getApiMoviesMovie_idImages
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    -
                      id: 1
                      url: 'http://localhost:8000/storage/images/KfUC3He02fgDhqcS.gif'
                      createdAt: '14/Aug, 2023'
                  links:
                    first: 'http://localhost:8000/api/movies/1/images?page=1'
                    last: 'http://localhost:8000/api/movies/1/images?page=1'
                    prev: null
                    next: null
                  meta:
                    current_page: 1
                    from: 1
                    last_page: 1
                    links:
                      -
                        url: null
                        label: '&laquo; Previous'
                        active: false
                      -
                        url: 'http://localhost:8000/api/movies/1/images?page=1'
                        label: '1'
                        active: true
                      -
                        url: null
                        label: 'Next &raquo;'
                        active: false
                    path: 'http://localhost:8000/api/movies/1/images'
                    per_page: 15
                    to: 1
                    total: 1
                properties:
                  data:
                    type: array
                    example:
                      -
                        id: 1
                        url: 'http://localhost:8000/storage/images/KfUC3He02fgDhqcS.gif'
                        createdAt: '14/Aug, 2023'
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        url:
                          type: string
                          example: 'http://localhost:8000/storage/images/KfUC3He02fgDhqcS.gif'
                        createdAt:
                          type: string
                          example: '14/Aug, 2023'
                  links:
                    type: object
                    properties:
                      first:
                        type: string
                        example: 'http://localhost:8000/api/movies/1/images?page=1'
                      last:
                        type: string
                        example: 'http://localhost:8000/api/movies/1/images?page=1'
                      prev:
                        type: string
                        example: null
                      next:
                        type: string
                        example: null
                  meta:
                    type: object
                    properties:
                      current_page:
                        type: integer
                        example: 1
                      from:
                        type: integer
                        example: 1
                      last_page:
                        type: integer
                        example: 1
                      links:
                        type: array
                        example:
                          -
                            url: null
                            label: '&laquo; Previous'
                            active: false
                          -
                            url: 'http://localhost:8000/api/movies/1/images?page=1'
                            label: '1'
                            active: true
                          -
                            url: null
                            label: 'Next &raquo;'
                            active: false
                        items:
                          type: object
                          properties:
                            url:
                              type: string
                              example: null
                            label:
                              type: string
                              example: '&laquo; Previous'
                            active:
                              type: boolean
                              example: false
                      path:
                        type: string
                        example: 'http://localhost:8000/api/movies/1/images'
                      per_page:
                        type: integer
                        example: 15
                      to:
                        type: integer
                        example: 1
                      total:
                        type: integer
                        example: 1
      tags:
        - 'Images management'
    post:
      summary: ''
      operationId: postApiMoviesMovie_idImages
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'Images management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  description: ''
                  example: vel
              required:
                - url
    parameters:
      -
        in: path
        name: movie_id
        description: 'The ID of the movie.'
        example: 1
        required: true
        schema:
          type: integer
  '/api/movies/{movie_id}/images/{id}':
    get:
      summary: ''
      operationId: getApiMoviesMovie_idImagesId
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 1
                    url: 'http://localhost:8000/storage/images/KfUC3He02fgDhqcS.gif'
                    createdAt: '14/Aug, 2023'
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      url:
                        type: string
                        example: 'http://localhost:8000/storage/images/KfUC3He02fgDhqcS.gif'
                      createdAt:
                        type: string
                        example: '14/Aug, 2023'
      tags:
        - 'Images management'
    put:
      summary: ''
      operationId: putApiMoviesMovie_idImagesId
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'Images management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  description: ''
                  example: amet
              required:
                - url
    delete:
      summary: ''
      operationId: deleteApiMoviesMovie_idImagesId
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'Images management'
    parameters:
      -
        in: path
        name: movie_id
        description: 'The ID of the movie.'
        example: 1
        required: true
        schema:
          type: integer
      -
        in: path
        name: id
        description: 'The ID of the image.'
        example: 1
        required: true
        schema:
          type: integer
  /api/movies:
    get:
      summary: ''
      operationId: getApiMovies
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Movie management'
    post:
      summary: ''
      operationId: postApiMovies
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'Movie management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: 'Must be at least 3 characters.'
                  example: nbtewmmqwccnhkpqxleayzewclsnivafxetkyonidwayhjpgovgzzqijosigdsapetwxwwuktjasfcwvbvsosukw
                description:
                  type: string
                  description: ''
                  example: nemo
                genre:
                  type: string
                  description: 'Must be one of <code>TERROR</code>, <code>ACCION</code>, <code>COMEDIA</code>, or <code>ROMANCE</code> Must be at least 3 characters.'
                  example: hqrjrwqimaqkuasascvfkwllacbhpytmikxmwrjicarjbkvekshbzqatkkgjykcxlxbetbyegdidsikyahwzaolbxw
                publish_at:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2023-08-14T19:39:35'
                director_id:
                  type: string
                  description: ''
                  example: explicabo
              required:
                - title
                - description
                - genre
                - publish_at
                - director_id
  '/api/movies/{movie_id}':
    get:
      summary: ''
      operationId: getApiMoviesMovie_id
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Movie management'
    put:
      summary: ''
      operationId: putApiMoviesMovie_id
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'Movie management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: 'Must be at least 3 characters.'
                  example: vmhflxfetjelpoyfcwatxsynfbwesmitai
                description:
                  type: string
                  description: ''
                  example: id
                genre:
                  type: string
                  description: 'Must be one of <code>TERROR</code>, <code>ACCION</code>, <code>COMEDIA</code>, or <code>ROMANCE</code> Must be at least 3 characters.'
                  example: wzjzxjtvvpdabgthdhrjbdoyowefmseetbtyizfgdnmunkciixrfmobuaa
                publish_at:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2023-08-14T19:39:35'
                director_id:
                  type: string
                  description: ''
                  example: numquam
              required:
                - title
                - description
                - genre
                - publish_at
                - director_id
    parameters:
      -
        in: path
        name: movie_id
        description: 'The ID of the movie.'
        example: 1
        required: true
        schema:
          type: integer
  '/api/movie/{movie_id}':
    delete:
      summary: ''
      operationId: deleteApiMovieMovie_id
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'Movie management'
    parameters:
      -
        in: path
        name: movie_id
        description: 'The ID of the movie.'
        example: 1
        required: true
        schema:
          type: integer
  '/api/movies/{movie_id}/actors':
    get:
      summary: ''
      operationId: getApiMoviesMovie_idActors
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Movie management'
    post:
      summary: ''
      operationId: postApiMoviesMovie_idActors
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'Movie management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                actors:
                  type: array
                  description: ''
                  example:
                    - quidem
                  items:
                    type: string
              required:
                - actors
    delete:
      summary: ''
      operationId: deleteApiMoviesMovie_idActors
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'Movie management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                actors:
                  type: array
                  description: ''
                  example:
                    - assumenda
                  items:
                    type: string
              required:
                - actors
    parameters:
      -
        in: path
        name: movie_id
        description: 'The ID of the movie.'
        example: 1
        required: true
        schema:
          type: integer
  '/api/movies/{movie_id}/rents':
    get:
      summary: ''
      operationId: getApiMoviesMovie_idRents
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Movie management'
    post:
      summary: ''
      operationId: postApiMoviesMovie_idRents
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'Movie management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rents:
                  type: array
                  description: ''
                  example:
                    - quibusdam
                  items:
                    type: string
              required:
                - rents
    delete:
      summary: ''
      operationId: deleteApiMoviesMovie_idRents
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'Movie management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rents:
                  type: array
                  description: ''
                  example:
                    - nemo
                  items:
                    type: string
              required:
                - rents
    parameters:
      -
        in: path
        name: movie_id
        description: 'The ID of the movie.'
        example: 1
        required: true
        schema:
          type: integer
  /api/rents:
    get:
      summary: ''
      operationId: getApiRents
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Rent management'
    post:
      summary: ''
      operationId: postApiRents
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'Rent management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                deadline_at:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2023-08-14T19:39:35'
                return_date_at:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2023-08-14T19:39:35'
                actual_date_at:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2023-08-14T19:39:35'
                user_id:
                  type: string
                  description: ''
                  example: reprehenderit
              required:
                - deadline_at
                - return_date_at
                - actual_date_at
                - user_id
  '/api/rents/{rent_id}':
    get:
      summary: ''
      operationId: getApiRentsRent_id
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Rent management'
    put:
      summary: ''
      operationId: putApiRentsRent_id
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'Rent management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                deadline_at:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2023-08-14T19:39:35'
                return_date_at:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2023-08-14T19:39:35'
                actual_date_at:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2023-08-14T19:39:35'
                user_id:
                  type: string
                  description: ''
                  example: veniam
              required:
                - deadline_at
                - return_date_at
                - actual_date_at
                - user_id
    delete:
      summary: ''
      operationId: deleteApiRentsRent_id
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'Rent management'
    parameters:
      -
        in: path
        name: rent_id
        description: 'The ID of the rent.'
        example: 1
        required: true
        schema:
          type: integer
  /api/auth:
    post:
      summary: ''
      operationId: postApiAuth
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Security management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: lind.trenton@example.net
                password:
                  type: string
                  description: ''
                  example: ut
              required:
                - email
                - password
      security: []
  /api/register:
    post:
      summary: ''
      operationId: postApiRegister
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Security management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: ''
                  example: ducimus
                age:
                  type: string
                  description: ''
                  example: temporibus
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: ashleigh32@example.net
                password:
                  type: string
                  description: ''
                  example: quidem
              required:
                - name
                - age
                - email
                - password
      security: []
  '/api/user/{user_id}':
    get:
      summary: ''
      operationId: getApiUserUser_id
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'User management'
    parameters:
      -
        in: path
        name: user_id
        description: 'The ID of the user.'
        example: 1
        required: true
        schema:
          type: integer
  '/api/auth/{user_id}':
    put:
      summary: ''
      operationId: putApiAuthUser_id
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'User management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: ''
                  example: eligendi
                age:
                  type: string
                  description: ''
                  example: molestias
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: wilford.renner@example.com
                password:
                  type: string
                  description: ''
                  example: quia
              required:
                - name
                - age
                - email
                - password
    delete:
      summary: ''
      operationId: deleteApiAuthUser_id
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'User management'
    parameters:
      -
        in: path
        name: user_id
        description: 'The ID of the user.'
        example: 1
        required: true
        schema:
          type: integer
tags:
  -
    name: 'Actor management'
    description: ''
  -
    name: 'Director management'
    description: ''
  -
    name: Endpoints
    description: ''
  -
    name: 'Images management'
    description: ''
  -
    name: 'Movie management'
    description: ''
  -
    name: 'Rent management'
    description: ''
  -
    name: 'Security management'
    description: ''
  -
    name: 'User management'
    description: ''
components:
  securitySchemes:
    default:
      type: http
      scheme: bearer
      description: ''
security:
  -
    default: []
