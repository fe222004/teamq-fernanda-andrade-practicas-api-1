openapi: 3.0.3
info:
  title: Laravel
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://localhost:8000'
paths:
  /api/actors:
    get:
      summary: ''
      operationId: getApiActors
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Actor management'
    post:
      summary: ''
      operationId: postApiActors
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Actor management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must be at least 3 characters.'
                  example: gonxnzuwbsafgiitctmrzjbvwgirgbquadsoqqzsumwchfiltvofeliffuhsuhqnmyplmdtvcwbaheadxmpdkggl
                last_name:
                  type: string
                  description: 'Must be at least 3 characters.'
                  example: pcqzvdqvarslvtcrrsjuruinshecbh
              required:
                - name
                - last_name
  '/api/actors/{actor_id}':
    get:
      summary: ''
      operationId: getApiActorsActor_id
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Actor management'
    put:
      summary: ''
      operationId: putApiActorsActor_id
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Actor management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must be at least 3 characters.'
                  example: rkffhmogknuxykckjwxxzcb
                last_name:
                  type: string
                  description: 'Must be at least 3 characters.'
                  example: ogvxpytwhqewntpdwejxlvzatukzm
              required:
                - name
                - last_name
    delete:
      summary: ''
      operationId: deleteApiActorsActor_id
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Actor management'
    parameters:
      -
        in: path
        name: actor_id
        description: 'The ID of the actor.'
        example: 1
        required: true
        schema:
          type: integer
  /api/directors:
    get:
      summary: ''
      operationId: getApiDirectors
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Director management'
    post:
      summary: ''
      operationId: postApiDirectors
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Director management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must be at least 3 characters.'
                  example: kavkhfiqlysejqxxfhsgmcjmmrfuzbxdpnnicyuzyasudkwynbwslsrxxgdihmgkf
                last_name:
                  type: string
                  description: 'Must be at least 3 characters.'
                  example: nxwgwfglwznqfzdwzqjnkvtubkmxrpwlnuyrieemeejylfinqhsbxthhmdulelpyle
              required:
                - name
                - last_name
  '/api/directors/{director_id}':
    get:
      summary: ''
      operationId: getApiDirectorsDirector_id
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Director management'
    put:
      summary: ''
      operationId: putApiDirectorsDirector_id
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Director management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must be at least 3 characters.'
                  example: xclalryonkyczapdlrtngwduqwrmvzjsrhxncvqavnsl
                last_name:
                  type: string
                  description: 'Must be at least 3 characters.'
                  example: istvowmrsgciikxezhlqlghuoxnuropsvahjbxjoogunutqtqjhxsscwvgvgfygbcwiohfdhxdonpr
              required:
                - name
                - last_name
    delete:
      summary: ''
      operationId: deleteApiDirectorsDirector_id
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Director management'
    parameters:
      -
        in: path
        name: director_id
        description: 'The ID of the director.'
        example: 1
        required: true
        schema:
          type: integer
  /api/register:
    post:
      summary: ''
      operationId: postApiRegister
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: ''
                  example: quae
                age:
                  type: string
                  description: ''
                  example: in
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: paige97@example.org
                password:
                  type: string
                  description: ''
                  example: atque
              required:
                - name
                - age
                - email
                - password
      security: []
  /api/movies:
    get:
      summary: ''
      operationId: getApiMovies
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Movie management'
    post:
      summary: ''
      operationId: postApiMovies
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Movie management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: 'Must be at least 3 characters.'
                  example: hmdrplwpkoilmaeoxpbpdfcaysxiinqbfutyqslm
                description:
                  type: string
                  description: ''
                  example: consequatur
                genre:
                  type: string
                  description: 'Must be one of <code>TERROR</code>, <code>ACCION</code>, <code>COMEDIA</code>, or <code>ROMANCE</code> Must be at least 3 characters.'
                  example: gapupqycvhzrvvftkhrkfbdkzqonspdkapvmcttffxbfcquariaotenhnmtyupwyfxghdnmtmkvtpwdcyli
                publish_at:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2023-08-07T20:24:59'
                director_id:
                  type: string
                  description: ''
                  example: eum
              required:
                - title
                - description
                - genre
                - publish_at
                - director_id
  '/api/movies/{movie_id}':
    get:
      summary: ''
      operationId: getApiMoviesMovie_id
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Movie management'
    put:
      summary: ''
      operationId: putApiMoviesMovie_id
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Movie management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: 'Must be at least 3 characters.'
                  example: bsmcscfvxlkqaydpwazuqsmotfcceqnystbxbwykgkpbmgsozwpjhoohuixyrqepdxqkfvglciswzp
                description:
                  type: string
                  description: ''
                  example: impedit
                genre:
                  type: string
                  description: 'Must be one of <code>TERROR</code>, <code>ACCION</code>, <code>COMEDIA</code>, or <code>ROMANCE</code> Must be at least 3 characters.'
                  example: qxgpybcewvanvnmxcimsietnhhhwngasxyectlvixsdqtxzcdhtmwjrlsuptuwnbusfyfqcokmorfseerqywdvpt
                publish_at:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2023-08-07T20:24:59'
                director_id:
                  type: string
                  description: ''
                  example: tempora
              required:
                - title
                - description
                - genre
                - publish_at
                - director_id
    parameters:
      -
        in: path
        name: movie_id
        description: 'The ID of the movie.'
        example: 1
        required: true
        schema:
          type: integer
  '/api/movie/{movie_id}':
    delete:
      summary: ''
      operationId: deleteApiMovieMovie_id
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Movie management'
    parameters:
      -
        in: path
        name: movie_id
        description: 'The ID of the movie.'
        example: 1
        required: true
        schema:
          type: integer
  '/api/movies/{movie_id}/actors':
    get:
      summary: ''
      operationId: getApiMoviesMovie_idActors
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Movie management'
    post:
      summary: ''
      operationId: postApiMoviesMovie_idActors
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Movie management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                actors:
                  type: array
                  description: ''
                  example:
                    - maiores
                  items:
                    type: string
              required:
                - actors
    delete:
      summary: ''
      operationId: deleteApiMoviesMovie_idActors
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Movie management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                actors:
                  type: array
                  description: ''
                  example:
                    - incidunt
                  items:
                    type: string
              required:
                - actors
    parameters:
      -
        in: path
        name: movie_id
        description: 'The ID of the movie.'
        example: 1
        required: true
        schema:
          type: integer
  '/api/movies/{movie_id}/rents':
    get:
      summary: ''
      operationId: getApiMoviesMovie_idRents
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Movie management'
    post:
      summary: ''
      operationId: postApiMoviesMovie_idRents
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Movie management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rents:
                  type: array
                  description: ''
                  example:
                    - dicta
                  items:
                    type: string
              required:
                - rents
    delete:
      summary: ''
      operationId: deleteApiMoviesMovie_idRents
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Movie management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rents:
                  type: array
                  description: ''
                  example:
                    - sed
                  items:
                    type: string
              required:
                - rents
    parameters:
      -
        in: path
        name: movie_id
        description: 'The ID of the movie.'
        example: 1
        required: true
        schema:
          type: integer
  /api/rents:
    get:
      summary: ''
      operationId: getApiRents
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Rent management'
    post:
      summary: ''
      operationId: postApiRents
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Rent management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                deadline_at:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2023-08-07T20:24:59'
                return_date_at:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2023-08-07T20:24:59'
                actual_date_at:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2023-08-07T20:24:59'
                user_id:
                  type: string
                  description: ''
                  example: tenetur
              required:
                - deadline_at
                - return_date_at
                - actual_date_at
                - user_id
  '/api/rents/{rent_id}':
    get:
      summary: ''
      operationId: getApiRentsRent_id
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Rent management'
    put:
      summary: ''
      operationId: putApiRentsRent_id
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Rent management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                deadline_at:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2023-08-07T20:24:59'
                return_date_at:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2023-08-07T20:24:59'
                actual_date_at:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2023-08-07T20:24:59'
                user_id:
                  type: string
                  description: ''
                  example: aut
              required:
                - deadline_at
                - return_date_at
                - actual_date_at
                - user_id
    delete:
      summary: ''
      operationId: deleteApiRentsRent_id
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Rent management'
    parameters:
      -
        in: path
        name: rent_id
        description: 'The ID of the rent.'
        example: 1
        required: true
        schema:
          type: integer
  /api/auth:
    post:
      summary: ''
      operationId: postApiAuth
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Security management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: alfred66@example.org
                password:
                  type: string
                  description: ''
                  example: quas
              required:
                - email
                - password
      security: []
  '/api/auth/{user_id}':
    put:
      summary: ''
      operationId: putApiAuthUser_id
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'User management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: ''
                  example: vel
                age:
                  type: string
                  description: ''
                  example: et
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: reece22@example.org
                password:
                  type: string
                  description: ''
                  example: omnis
              required:
                - name
                - age
                - email
                - password
    delete:
      summary: ''
      operationId: deleteApiAuthUser_id
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'User management'
    parameters:
      -
        in: path
        name: user_id
        description: 'The ID of the user.'
        example: 1
        required: true
        schema:
          type: integer
  /api/users:
    get:
      summary: ''
      operationId: getApiUsers
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                example:
                  -
                    id: 1
                    name: Juan
                    age: 32
                    email: juan.hahn@example.com
                    email_verified_at: '2023-08-04T01:12:20.000000Z'
                    created_at: '2023-08-04T01:12:20.000000Z'
                    updated_at: '2023-08-05T00:47:59.000000Z'
                  -
                    id: 2
                    name: Marta
                    age: 23
                    email: marta.devora@example.com
                    email_verified_at: '2023-08-04T01:12:20.000000Z'
                    created_at: '2023-08-04T01:12:20.000000Z'
                    updated_at: '2023-08-05T00:49:21.000000Z'
                  -
                    id: 3
                    name: 'Willy Effertz'
                    age: 45
                    email: chandler23@example.net
                    email_verified_at: '2023-08-04T01:12:20.000000Z'
                    created_at: '2023-08-04T01:12:20.000000Z'
                    updated_at: '2023-08-04T01:12:20.000000Z'
                  -
                    id: 4
                    name: 'Gail Koch'
                    age: 56
                    email: uhartmann@example.com
                    email_verified_at: '2023-08-04T01:12:20.000000Z'
                    created_at: '2023-08-04T01:12:20.000000Z'
                    updated_at: '2023-08-04T01:12:20.000000Z'
                  -
                    id: 5
                    name: 'Pete Boehm'
                    age: 56
                    email: dillon.smitham@example.net
                    email_verified_at: '2023-08-04T01:12:20.000000Z'
                    created_at: '2023-08-04T01:12:20.000000Z'
                    updated_at: '2023-08-04T01:12:20.000000Z'
                  -
                    id: 6
                    name: 'Raul Padberg'
                    age: 34
                    email: mboyle@example.net
                    email_verified_at: '2023-08-04T20:29:30.000000Z'
                    created_at: '2023-08-04T20:29:30.000000Z'
                    updated_at: '2023-08-04T20:29:30.000000Z'
                  -
                    id: 7
                    name: 'Katelin Casper'
                    age: 23
                    email: desiree61@example.net
                    email_verified_at: '2023-08-04T20:29:30.000000Z'
                    created_at: '2023-08-04T20:29:30.000000Z'
                    updated_at: '2023-08-04T20:29:30.000000Z'
                  -
                    id: 8
                    name: 'Bryce Cummerata I'
                    age: 23
                    email: lswift@example.org
                    email_verified_at: '2023-08-04T20:29:30.000000Z'
                    created_at: '2023-08-04T20:29:30.000000Z'
                    updated_at: '2023-08-04T20:29:30.000000Z'
                  -
                    id: 9
                    name: 'Murray Auer'
                    age: 23
                    email: uschmeler@example.net
                    email_verified_at: '2023-08-04T20:29:30.000000Z'
                    created_at: '2023-08-04T20:29:30.000000Z'
                    updated_at: '2023-08-04T20:29:30.000000Z'
                  -
                    id: 10
                    name: 'Prof. Loren Flatley MD'
                    age: 23
                    email: dolores.schoen@example.net
                    email_verified_at: '2023-08-04T20:29:30.000000Z'
                    created_at: '2023-08-04T20:29:30.000000Z'
                    updated_at: '2023-08-04T20:29:30.000000Z'
                  -
                    id: 12
                    name: Hector
                    age: 22
                    email: Hector.noble@example.net
                    email_verified_at: '2023-08-04T20:27:37.000000Z'
                    created_at: '2023-08-05T01:11:49.000000Z'
                    updated_at: '2023-08-05T01:11:49.000000Z'
                  -
                    id: 13
                    name: Joselyn
                    age: 19
                    email: joselyn19@example.com
                    email_verified_at: null
                    created_at: '2023-08-05T01:31:18.000000Z'
                    updated_at: '2023-08-05T01:31:18.000000Z'
      tags:
        - 'User management'
tags:
  -
    name: 'Actor management'
    description: ''
  -
    name: 'Director management'
    description: ''
  -
    name: Endpoints
    description: ''
  -
    name: 'Movie management'
    description: ''
  -
    name: 'Rent management'
    description: ''
  -
    name: 'Security management'
    description: ''
  -
    name: 'User management'
    description: ''
